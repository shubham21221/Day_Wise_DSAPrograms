/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        // Initialize dummy node and temporary pointer
        ListNode* dummy = new ListNode();
        ListNode* temp = dummy;
        int carry = 0;

        // Loop until both lists are exhausted or carry exists
        while (l1 != nullptr || l2 != nullptr || carry) {
            int sum = 0;

            // Add value from l1 if it exists
            if (l1 != nullptr) {
                sum += l1->val;
                l1 = l1->next;
            }

            // Add value from l2 if it exists
            if (l2 != nullptr) {
                sum += l2->val;
                l2 = l2->next;
            }

            // Add carry from previous iteration
            sum += carry;

            // Update carry and store the current digit
            carry = sum / 10;
            ListNode* node = new ListNode(sum % 10);

            // Link the new node to the result list
            temp->next = node;
            temp = temp->next;
        }

        // Return the head of the result list
        return dummy->next;
    }
};
